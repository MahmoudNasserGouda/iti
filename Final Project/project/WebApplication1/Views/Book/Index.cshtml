@using Microsoft.AspNetCore.Identity;
@using WebApplication1.Models.Repositories;
@model Book;
@inject UserManager<User> userManager
@inject IUserRepository userRepository

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section NavBar{
    <partial name="_NavBarPV" />
}

<div class="p-xxl-5 ms-xxl-5 me-xxl-5" id="book" data="@Model.ID">
    <div class="align-content-sm-center flex-row d-flex">
        <div class="d-inline-block">
            <img class="rounded-3" height="400" src="@Model.ImagePath">
        </div>
        <div class="align-top d-inline-block ms-xxl-5">
            <div class="mt-4">
                <h1 class="">@Model.Name</h1>
            </div>
            <div class="mt-2 ms-2 h5">
                <span class="flex items-center d-inline">
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-[16px] w-[16px] text-gray-t0 sm2:h-[20px] sm2:w-[20px]">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M14.327 18H2a2 2 0 0 1-2-2V7.94a2 2 0 0 1 1.875-1.997l4.175-.26 3.641-3.768A3 3 0 0 1 11.848 1h.613a2 2 0 0 1 1.828 2.812l-.676 1.522 1.288-.13a4.343 4.343 0 0 1 4.577 5.618l-1.375 4.402A3.956 3.956 0 0 1 14.327 18ZM7 7.578V16h7.327c.855 0 1.611-.556 1.867-1.372l1.375-4.403a2.343 2.343 0 0 0-2.469-3.03l-3 .3a1 1 0 0 1-1.014-1.401L12.461 3h-.613a1 1 0 0 0-.719.305L7 7.578Zm-2 .174-3 .187V16h3V7.752Z" fill="currentColor"></path>
                    </svg>
                    <span class="ml-[4px]">
                        <span id="bookRating">@Model.Rating</span>
                        <span> %</span>
                    </span>
                </span>

               <span class="text-danger ms-1 me-1 h4"> | </span>
               
                <a href="#Reviews" class="text-decoration-none text-black">
                    <div class="ml-2px h5 flex items-center d-inline" role="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                        <span class="cursor-pointer hover:underline">
                            <span id="reviewsCount">@ViewBag.reviews</span>
                            <span> Reviews</span>
                            </span>
                        <div class="pt-1 d-inline">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor" xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" style="transform: rotate(90deg);">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="m10 7.37 7.316 6.86 1.368-1.46L10 4.63l-8.684 8.14 1.368 1.46L10 7.37Z"></path>
                            </svg>
                        </div>
                    </div>
                </a>
            </div>
            <div class="mt-2 ms-2">
                <span class="h5">Author: <span class="h4">@Model.AuthorName</span></span>
            </div>
            <div class="mt-2 ms-2">
                <span class="h5">Category: <span class="h4">@Model.Category.Name</span></span>
            </div>
            <div class="mt-2 ms-2">
                <span class="h5">Puplished: <span class="h4">@Model.PublishDate</span></span>
            </div>
            <div class="mt-2 ms-2">
                <span class="h5">Description: </span>
                <p class="w-80">@Model.Description</p>
            </div>
            <div class="mt-2 ms-2">
                @if (userManager.GetUserAsync(User).Result != null && userRepository.IsBookmarkedBook(userManager.GetUserAsync(User).Result.Id, Model.ID).Result)
                {
                    <div class="ms-0 d-inline-block" id="bookmark" data="1" role="button" onclick="Bookmark()">
                        <svg height="2em" width="2em">
                            <use href="#bookmarked"></use>
                        </svg>
                    </div>
                }
                else
                {
                    <div class="ms-0 d-inline-block" id="bookmark" data="0" role="button" onclick="Bookmark()">
                        <svg height="2em" width="2em">
                            <use href="#notBookmarked"></use>
                        </svg>
                    </div>
                }
                @if (User.IsInRole("Admin"))
                {
                    <div class="ms-2 d-inline-block" role="button" onclick="GetChapter()">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addChapterModal">
                            Add Chapter
                        </button>
                    </div>
                }

            </div>
        </div>
    </div>

    <br />
    <hr class="text-primary rounded-3 opacity-75" />
    <br />

    <style>
        .accordion-button::after {
            filter: grayscale(1);
            filter: invert(1);
        }

        .accordion-button:not(.collapsed):after {
            filter: grayscale(1);
            filter: invert(0.5);
        }
    </style>

    <div class="accordion accordion-flush mt-5" id="accordionFlushExample">
        <div class="accordion-item mb-2">
            <h2 class="accordion-header" id="flush-headingOne">
                <button class="accordion-button collapsed fs-3 text-light bg-dark rounded-3" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                    Chapters
                </button>
            </h2>
            <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">
                    <div id="Chapters" class="align-content-sm-center flex-column d-flex ps-4 pe-4 ms-4 me-4"></div>
                </div>
            </div>
        </div>
        <div class="accordion-item mb-2">
            <h2 class="accordion-header" id="flush-headingTwo">
                <button class="accordion-button collapsed fs-3 text-light bg-dark rounded-3" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                    Reviews
                </button>
            </h2>
            <div id="flush-collapseTwo" class="accordion-collapse collapse" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">
                    <div id="Reviews" class="align-content-sm-center flex-column d-flex ps-4 pel-4 ms-4 me-4"></div>
                    <div id="Review" class="align-content-sm-center flex-column d-flex ps-4 pe-4 ms-4 me-4"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<svg xmlns="http://www.w3.org/2000/svg" height="2em" width="2em" viewBox="0 0 384 512">
    <symbol xmlns="http://www.w3.org/2000/svg" height="2em" width="2em" viewBox="0 0 384 512" id="bookmarked">
        <path d="M0 48V487.7C0 501.1 10.9 512 24.3 512c5 0 9.9-1.5 14-4.4L192 400 345.7 507.6c4.1 2.9 9 4.4 14 4.4c13.4 0 24.3-10.9 24.3-24.3V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48z" />
    </symbol>
    <symbol xmlns="http://www.w3.org/2000/svg" height="2em" width="2em" viewBox="0 0 384 512" id="notBookmarked">
        <path d="M0 48C0 21.5 21.5 0 48 0l0 48V441.4l130.1-92.9c8.3-6 19.6-6 27.9 0L336 441.4V48H48V0H336c26.5 0 48 21.5 48 48V488c0 9-5 17.2-13 21.3s-17.6 3.4-24.9-1.8L192 397.5 37.9 507.5c-7.3 5.2-16.9 5.9-24.9 1.8S0 497 0 488V48z" />
    </symbol>
</svg>

<style>
    .modal-backdrop.show {
        opacity: 0.1;
        background-image: conic-gradient(white, white);
        filter: blur(5px);
    }
</style>

<div class="modal fade" id="addChapterModal" tabindex="-1" aria-labelledby="addChapterModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addChapterModalLabel">Add Chapter</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body" id="addChapter"></div>

            <div class="modal-footer d-flex flex-row justify-content-center">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="AddChapter()">Save</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="editChapterModal" tabindex="-1" aria-labelledby="editChapterModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editChapterModalLabel">Edit Chapter</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body" id="editChapter"></div>

            <div class="modal-footer d-flex flex-row justify-content-center">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="SaveChapter()">Save</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script type="text/javascript">
        function Bookmark() {
            if (document.getElementById("bookmark").attributes.data.value == 0) {
                $.ajax({
                    type: 'POST',
                    url: "/Book/Bookmark/" + @Model.ID,
                    success: function (data) {
                        document.getElementById("bookmark").childNodes[1].childNodes[1].attributes[0].value = "#bookmarked";
                        document.getElementById("bookmark").attributes.data.value = 1;
                    },
                    error: function (e) {
                        console.log(e);
                    }
                });
            }
            if (document.getElementById("bookmark").attributes.data.value == 1) {
                $.ajax({
                    type: 'POST',
                    url: "/Book/UnBookmark/" + @Model.ID,
                    success: function (data) {
                        document.getElementById("bookmark").childNodes[1].childNodes[1].attributes[0].value = "#notBookmarked";
                        document.getElementById("bookmark").attributes.data.value = 0;
                    },
                    error: function (e) {
                        console.log(e);
                    }
                });
            }            
        }
        function GetChapters() {
            $.ajax({
                method: "GET",
                url: "/Chapter/Chapters/" + @Model.ID,
                contentType: "text/html",
                success: function (data) {
                    $("#Chapters").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        GetChapters();
        function DeleteChapter(chapterId) {
            $.ajax({
                method: "POST",
                url: "/Chapter/Delete/" + chapterId,
                success: function (data) {
                    GetChapters();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function UpChapter(chapterId) {
            $.ajax({
                method: "POST",
                url: "/Chapter/Up/" + chapterId,
                success: function (data) {
                    GetChapters();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function DownChapter(chapterId) {
            $.ajax({
                method: "POST",
                url: "/Chapter/Down/" + chapterId,
                success: function (data) {
                    GetChapters();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function GetChapter() {
            $.ajax({
                method: "GET",
                url: "/Chapter/Chapter",
                contentType: "text/html",
                success: function (data) {
                    $("#addChapter").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function AddChapter() {
            var data = {
                "ID": 0,
                "Order": parseInt(document.getElementById("chaptersCount").getAttributeNode("data").value) + 1,
                "Title": document.getElementById("Title").value,
                "Content": document.getElementById("Content").value,
                "BookID": document.getElementById("book").getAttributeNode("data").value,
            }
            $.ajax({
                method: "POST",
                url: "/Chapter/Chapter",
                dataType: "json",
                data: data,
                success: function (data) {
                    GetChapters();
                    $("#addChapter").html("");
                },
                error: function (e) {
                    console.log(e.message);
                }
            })
        }
        function EditChapter(chapterId) {
            $.ajax({
                method: "GET",
                url: "/Chapter/Edit/" + chapterId,
                contentType: "text/html",
                success: function (data) {
                    $("#editChapter").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function SaveChapter() {
            var data = {
                "ID": document.getElementById("ID").value,
                "Title": document.getElementById("Title").value,
                "Content": document.getElementById("Content").value
            }
            $.ajax({
                method: "POST",
                url: "/Chapter/Edit/" + document.getElementById("ID").value,
                dataType: "json",
                data: data,
                success: function (data) {
                    GetChapters();
                    $("#editChapter").html("");
                },
                error: function (e) {
                    console.log(e.message);
                }
            })
        }
        function GetReviews() {
            $.ajax({
                method: "GET",
                url: "/Review/Reviews/" + @Model.ID,
                contentType: "text/html",
                success: function (data) {
                    $("#Reviews").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        GetReviews();
        function DeleteReview(reviewId) {
            $.ajax({
                method: "Post",
                url: "/Review/Delete/" + reviewId,
                success: function (data) {
                    GetReviews();
                    document.getElementById("reviewsCount").innerText = parseInt(document.getElementById("reviewsCount").innerText) - 1;
                    document.getElementById("bookRating").innerText = data.r
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function GetReview() {
            $.ajax({
                method: "GET",
                url: "/Review/Review",
                contentType: "text/html",
                success: function (data) {
                    $("#Review").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
            SetReview();
        }
        function SetReview() {
            setTimeout(() => {
                document.forms[0].onsubmit = function () {
                    event.preventDefault();
                    var data = {
                        "ID": 0,
                        "Rating": document.getElementById("rating").getAttributeNode("data").value,
                        "Text": document.getElementById("Text").value,
                        "Votes": 0,
                        "Date": 0,
                        "BookID": document.getElementById("book").getAttributeNode("data").value,
                        "UserID": document.getElementById("addReview").getAttributeNode("data").value
                    }
                    $.ajax({
                        method: "POST",
                        url: "/Review/Review",
                        dataType: "json",
                        data: data,
                        success: function (data) {
                            GetReviews();
                            document.getElementById("reviewsCount").innerText = parseInt(document.getElementById("reviewsCount").innerText) + 1;
                            document.getElementById("bookRating").innerText = data.r;
                            $("#Review").html("");
                        },
                        error: function (e) {
                            $("#Review").html(e.responseText);
                            SetReview();
                        }
                    })
                }
            }, "1000");
        }
        function UpVote(reviewId, vote) {
            $.ajax({
                type: 'POST',
                url: "/Review/UpVote",
                data:
                {
                    reviewId: reviewId,
                    vote: vote
                },
                success: function (data) {
                    GetReviews();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function DownVote(reviewId, vote) {
            $.ajax({
                type: 'POST',
                url: "/Review/DownVote",
                data:
                {
                    reviewId: reviewId,
                    vote: vote
                },
                success: function (data) {
                    GetReviews();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
    </script>
}