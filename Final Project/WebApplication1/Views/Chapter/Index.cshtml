@model WebApplication1.Models.Entities.Chapter

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section NavBar{
    <partial name="_NavBarPV" />
}

<div class="p-xxl-5 ms-xxl-5 me-xxl-5" id="chapter" data="@Model.ID">

    <div class="text-center ps-xxl-5 mb-4 pe-xxl-5 ms-xxl-5 me-xxl-5">
        @{ string bookTitle = ViewBag.BookTitle; }
        @Html.ActionLink(bookTitle  ,"Index" , "Book" ,new{Id = ViewBag.BookId},new{@class="text-center text-decoration-none display-1 text-dark"})
    </div>

    <div class="align-content-sm-center mb-2 justify-content-center flex-row d-flex ps-xxl-5 pe-xxl-5 ms-xxl-5 me-xxl-5">
        @if(ViewBag.Prev != 0)
        {
            @Html.ActionLink( "previous" ,"Index" , "Chapter" ,new{id = @ViewBag.Prev},new{@class="btn btn-primary d-inline-flex"})
        }
        else
        {
            @Html.ActionLink( "previous" ,"Index" , "Chapter" ,new{id = @ViewBag.Prev},new{@class="btn btn-primary d-inline-flex disabled"})
        }
        <span class="ps-2 pe-2 h4">Chapter @Model.Order: @Model.Title</span>
        @if (ViewBag.Next != 0)
        {
            @Html.ActionLink( "Next" ,"Index" , "Chapter" ,new{id = @ViewBag.Next},new{@class="btn btn-primary d-inline-flex"})
        }
        else
        {
            @Html.ActionLink( "Next" ,"Index" , "Chapter" ,new{id = @ViewBag.Next},new{@class="btn btn-primary d-inline-flex disabled"})
        }
    </div>

    <br />

    <div class="align-content-sm-center mb-2 justify-content-center flex-row d-flex ps-xxl-5 pe-xxl-5 ms-xxl-5 me-xxl-5">
        <div class="d-inline-block ps-2">
            <select class="btn btn-secondary dropdown-toggle" name="voice" id="voice">
                <option class="dropdown-item" selected value="UK English Male">UK Male</option>
                <option class="dropdown-item" value="UK English Female">UK Female</option>
                <option class="dropdown-item" value="US English Male">US Male</option>
                <option class="dropdown-item" value="US English Female">US Female</option>
            </select>
        </div>
        <div class="d-inline-flex align-items-center ps-2" role="button" onclick="Play()">
            <i id="play" class="fa-regular fa-circle-play fa-xl"></i>
        </div>
    </div>
    <br />

    <div class="align-content-sm-center justify-content-center flex-row d-flex ps-xxl-5 pe-xxl-5 ms-xxl-5 me-xxl-5">
        @{
            List<string> chapter = Model.Content.Split('.').ToList();
            foreach (var sentence in chapter.ToList())
            {
                if (String.IsNullOrWhiteSpace(sentence))
                {
                    chapter.Remove(sentence);
                }
            }
        }
        <style type="text/css">
            .sentence {
                background-color: inherit;
            }
            .sentence:hover {
                background-color: #c0bfd6;
            }
        </style>
        <pre class="w-auto overflow-visible lead fs-5">@foreach (var (sentence,index) in chapter.Select((v,i)=>(v,i)))
            {<span class="sentence" id="sentence @index" data="@sentence" role="button" onclick="Speak(@index)">@sentence.</span>}</pre>
    </div>

    <br />

    <div class="align-content-sm-center mt-2 justify-content-center flex-row d-flex ps-xxl-5 pe-xxl-5 ms-xxl-5 me-xxl-5">

        @if (ViewBag.Prev != 0)
        {
            @Html.ActionLink( "previous" ,"Index" , "Chapter" ,new{id = @ViewBag.Prev},new{@class="btn btn-primary d-inline-flex"})
        }
        else
        {
            @Html.ActionLink( "previous" ,"Index" , "Chapter" ,new{id = @ViewBag.Prev},new{@class="btn btn-primary d-inline-flex disabled"})
        }
        <span class="ps-2 pe-2 h4">Chapter @Model.Order: @Model.Title</span>
        @if (ViewBag.Next != 0)
        {
            @Html.ActionLink( "Next" ,"Index" , "Chapter" ,new{id = @ViewBag.Next},new{@class="btn btn-primary d-inline-flex"})
        }
        else
        {
            @Html.ActionLink( "Next" ,"Index" , "Chapter" ,new{id = @ViewBag.Next},new{@class="btn btn-primary d-inline-flex disabled"})
        }
    </div>

    <br />
    <hr class="text-primary rounded-3 opacity-75" />
    <br />

    <div id="Comments" class="align-content-sm-center flex-column d-flex ps-xxl-5 pe-xxl-5 ms-xxl-5 me-xxl-5"></div>

    <div id="Comment" class="align-content-sm-center flex-column d-flex ps-xxl-5 pe-xxl-5 ms-xxl-5 me-xxl-5"></div>
</div>


@section Scripts{
    <script type="text/javascript">
        function Speak(index) {
            responsiveVoice.cancel();
            $(".sentence").each((index) => { console.log($(".sentence")[index].style = "") })
            if (document.getElementById("sentence " + index)) {
                function OnStart() {
                    document.getElementById("sentence " + index).style.backgroundColor = '#c0bfd6';
                    $("#play")[0].classList.remove("fa-circle-play");
                    $("#play")[0].classList.add("fa-circle-pause");
                }
                function OnEnd() {
                    $(".sentence").each((index) => { console.log($(".sentence")[index].style = "") })
                    $("#play")[0].classList.add("fa-circle-play");
                    $("#play")[0].classList.remove("fa-circle-pause");
                    Speak(index + 1);
                }
                var voice = document.getElementById("voice").value;
                var sentence = document.getElementById("sentence " + index).getAttributeNode("data").value.replace(/(\r\n|\n|\r)/gm, "");
                responsiveVoice.speak(sentence, voice, { onstart: OnStart, onend: OnEnd });
            }
        }
        function Play() {
            if (responsiveVoice.isPlaying()) {
                responsiveVoice.pause();
                $("#play")[0].classList.add("fa-circle-play");
                $("#play")[0].classList.remove("fa-circle-pause");
            }
            else {
                responsiveVoice.resume();
                $("#play")[0].classList.remove("fa-circle-play");
                $("#play")[0].classList.add("fa-circle-pause");
                if (!responsiveVoice.isPlaying()) {
                    Speak(0);
                }
            }
        }
        function GetComments() {
            $.ajax({
                method: "GET",
                url: "/Comment/Comments/" + @Model.ID,
                contentType: "text/html",
                success: function (data) {
                    $("#Comments").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function DeleteComment(commentId) {
            $.ajax({
                method: "Post",
                url: "/Comment/Delete/" + commentId,
                success: function (data) {
                    GetComments();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        GetComments();
        function GetComment() {
            $.ajax({
                method: "GET",
                url: "/Comment/Comment",
                contentType: "text/html",
                success: function (data) {
                    $("#Comment").html(data);
                },
                error: function (e) {
                    console.log(e);
                }
            });
            SetComment();
        }
        function SetComment() {
            setTimeout(() => {
                document.forms[0].onsubmit = function () {
                    event.preventDefault();
                    var data = {
                        "ID": 0,
                        "Text": document.getElementById("Text").value,
                        "Votes": 0,
                        "Date": 0,
                        "ChapterID": document.getElementById("chapter").getAttributeNode("data").value,
                        "UserID": document.getElementById("addComment").getAttributeNode("data").value
                    }
                    $.ajax({
                        method: "POST",
                        url: "/Comment/Comment",
                        dataType: "json",
                        data: data,
                        success: function (data) {
                            GetComments();
                        },
                        error: function (e) {
                            $("#Comment").html(e.responseText);
                            SetComment();
                        }
                    })
                }
            }, "1000");
        }
        function UpVote(commentId, vote) {
            $.ajax({
                type: 'POST',
                url: "/Comment/UpVote",
                data:
                {
                    commentId: commentId,
                    vote: vote
                },
                success: function (data) {
                    GetComments();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
        function DownVote(commentId, vote) {
            $.ajax({
                type: 'POST',
                url: "/Comment/DownVote",
                data:
                {
                    commentId: commentId,
                    vote: vote
                },
                success: function (data) {
                    GetComments();
                },
                error: function (e) {
                    console.log(e);
                }
            });
        }
    </script>
}